{{ if eq .chezmoi.os "linux" }}
fish_add_path /home/linuxbrew/.linuxbrew/bin
{{ else if eq .chezmoi.os "darwin" -}}
fish_add_path /opt/homebrew/bin
{{ end -}}
fish_add_path ~/.local/bin
# for some reason, these can be missing
fish_add_path /bin
fish_add_path /usr/bin
fish_add_path /usr/local/bin

mise activate fish --shims | source

alias vim lvim
alias ls eza
alias grep rg
alias cat bat
alias htop btop
alias top btop

set -gx SHELL fish
set -gx EDITOR lvim
set -gx LANG en_US.UTF-8

# Setup Dagger engine with caching
function _setup_dagger_engine
    set -l cache_dir "$HOME/.cache/dagger"
    set -l cache_file "$cache_dir/pod_name"
    set -l cache_ttl 3600  # 1 hour in seconds

    mkdir -p "$cache_dir"

    # Check if cache exists and is fresh
    if test -f "$cache_file"
        set -l current_time (date +%s)
        set -l cache_mtime (stat -c %Y "$cache_file" 2>/dev/null; or stat -f %m "$cache_file" 2>/dev/null)
        set -l cache_age (math $current_time - $cache_mtime)

        if test $cache_age -lt $cache_ttl
            set -gx _EXPERIMENTAL_DAGGER_RUNNER_HOST (cat "$cache_file")
            return
        end
    end

    # Try to get the pod name
    if command -v kubectl &> /dev/null
        set -l pod_name (kubectl get pod --selector=name=dagger-dagger-helm-engine --namespace=dagger --output=jsonpath='{.items[0].metadata.name}' 2>/dev/null)

        if test -n "$pod_name"
            set -l runner_host "kube-pod://$pod_name?namespace=dagger"
            echo "$runner_host" > "$cache_file"
            set -gx _EXPERIMENTAL_DAGGER_RUNNER_HOST "$runner_host"
        end
    end
end

_setup_dagger_engine

# Setup Starship config for Coder environment
function _setup_starship_config
    # Check if we're in Coder
    if test "$CODER" = "true"
        set -l runtime_config "$HOME/.config/starship-runtime.toml"
        set -l base_config "$HOME/.config/starship.toml"

        # Create Coder-specific config by appending overrides to base config
        if test -f "$base_config"
            # Copy base config if runtime config doesn't exist or is older
            if not test -f "$runtime_config"; or test "$base_config" -nt "$runtime_config"
                cat "$base_config" > "$runtime_config"
            end

            # Only append overrides if they don't already exist
            if not grep -q "# Coder environment overrides" "$runtime_config" 2>/dev/null
                echo "" >> "$runtime_config"
                echo "# Coder environment overrides" >> "$runtime_config"
                echo "[hostname]" >> "$runtime_config"
                echo "disabled = true" >> "$runtime_config"
                echo "" >> "$runtime_config"
                echo "[container]" >> "$runtime_config"
                echo "disabled = true" >> "$runtime_config"
            end

            set -gx STARSHIP_CONFIG "$runtime_config"
        end
    end
end

_setup_starship_config

if status is-interactive
  fish_vi_key_bindings

  starship init fish | source
  atuin init fish | source

  set -Ux CARAPACE_BRIDGES 'zsh,fish,bash,inshellisense' # optional
  mkdir -p ~/.config/fish/completions
  # Run the following block only once a day
  if test (find ~/.config/fish/completions -name '*.fish' -mtime -1 | wc -l) -eq 0
      echo "running carapace..."
      carapace --list | awk '{print $1}' | xargs -I{} touch ~/.config/fish/completions/{}.fish # disable auto-loaded completions (#185)
  end
  carapace _carapace | source
end
